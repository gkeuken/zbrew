#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 8 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 9 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
registrar [-vd] <swname> enable|disable <dataset> <member> <header> <footer> <comment-prefix> <comment-suffix> [<enablement text>]

Examples:
	Enable BGZ106 in ZBREW.PARMLIB(IGYPRDZB) with \"PRODUCT OWNER('IBM CORP') ... STATE(ENABLED)\"
		registrar bgz106 enable ZBREW.PARMLIB IGYPRDZB \"/*\" \"*/\" \"/* BGZ106 5737-I22 Header */\" \"/* BGZ106 5737-I22 Footer */\" \"PRODUCT OWNER('IBM CORP') ... STATE(ENABLED)\"
	Disable BGZ106 in ZBREW.PARMLIB(IGYPRDZB) with \"PRODUCT OWNER('IBM CORP') ... STATE(ENABLED)\"
        	registrar bgz106 disable ZBREW.PARMLIB IGYPRDZB \"/*\" \"*/\" \"/* BGZ106 5737-I22 Header */\" \"/* BGZ106 5737-I22 Footer */\"
Note:
	The dataset is created if it does not already exist
	The PDS member is created if it does not already exist
	The PDS member will have the new product enablement text appended if 'enable' is specified.
	The PDS member will have the product enablement text removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

addProduct() {
	text="${1}"
	dataset="${2}"

	decho -a "${header}
${text}
${footer}" "${dataset}"
	rc=$?
	if [ $rc -gt 0 ]; then 
		echo "registrar: Error. Unable to append to: ${dataset}" >&2
	fi
	return $rc
}
	
. zbrewsetenv

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg registrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 8 ]; then
        msg registrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
dataset=$(echo $3 | tr '[:lower:]' '[:upper:]');
member=$(echo $4 | tr '[:lower:]' '[:upper:]');
header="$5"
footer="$6"
commentPrefix="$7"
commentSuffix="$8"
if [ "${verb}" = "ENABLE" ]; then
	if [ $# -lt 9 ]; then 
		msg registrar ${TooFewEnableParms} E "$#"
		syntax
		exit 8
	fi    
	text="$9"
elif [ "${verb}" != "DISABLE" ]; then
	msg registrar ${UnknownAction} E "${verb}"
	exit 8
fi  
banner="${commentPrefix} NOTE: File generated by zbrew. Only use zbrew to change ${commentSuffix}"

parmlibds="${dataset}"
dls ${parmlibds} >/dev/null 2>&1
exists=$?

#
# Dataset does not exist yet. If ENABLE, create. If DISABLE, all done
#
if [ ${exists} -gt 0 ]; then
	if [ "${verb}" = "ENABLE" ]; then
		dtouch -tpds -b20 "${parmlibds}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "registrar: Error. Unable to create PDS ${parmlibds}" >&2
			exit $rc
		fi
	else
		exit 0
	fi
fi

parmlibmember="${parmlibds}(${member})"
mls "${parmlibmember}" >/dev/null 2>&1
exists=$?

#
# Dataset member does not exist yet. If ENABLE, create. If DISABLE, all done
#
if [ ${exists} -gt 0 ]; then
	if [ "${verb}" = "ENABLE" ]; then
		decho "${banner}" "${parmlibmember}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "registrar: Error. Unable to create PDS member ${parmlibmember}" >&2
			exit $rc
		fi
		addProduct "${text}" "${parmlibmember}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "registrar: Error. Unable to create PDS member ${parmlibmember}" >&2
		fi
		exit $rc
	else
		exit 0
	fi
fi

#
# Dataset member exists. If ENABLE, check if product already specified. If so, issue error. If not, append to bottom
# If DISABLE, check if product already specified. If so, remove entry. If not, all done (no error). 
#

hdr=false
ftr=false

hdrout=`dgrep -n "${header}" "${parmlibmember}"`
rc=$?
if [ ${rc} -eq 0 ]; then
	hdr=true
fi
ftrout=`dgrep -n "${footer}" "${parmlibmember}"`
rc=$?
if [ ${rc} -eq 0 ]; then
	ftr=true
fi

hdrnum=`echo "${hdrout}" | wc -l`
ftrnum=`echo "${ftrout}" | wc -l`

if [ $hdrnum -gt 1 ]; then
	echo "registrar: Severe Error. Multiple product headers for: ${sw} in ${parmlibmember}" >&2
	exit 16
fi
if [ $ftrnum -gt 1 ]; then
	echo "registrar: Severe Error. Multiple product footers for: ${sw} in ${parmlibmember}" >&2
	exit 16
fi

hdrline=`echo "${hdrout}" | awk '{ print substr($2, 1, length($2)-1) }'`
ftrline=`echo "${ftrout}" | awk '{ print substr($2, 1, length($2)-1) }'`

if [ "$hdr" = true ] && [ "$ftr" = true ] ; then
	if [ "${verb}" = "ENABLE" ]; then
		echo "registrar: Error. Trying to enable product ${sw} in ${parmlibmember}, which is already enabled." >&2
		exit 8
	fi

	# DISABLE 
	current=`cat "//'${parmlibmember}'"`
	headlines=`expr $hdrline - 1`
	before=`echo "${current}" | head -${headlines}`
	taillines=`expr $ftrline + 1`
	after=`echo "${current}" | tail +${taillines}`
	if [ "${after}" = "" ]; then
		decho "${before}" "${parmlibmember}"
	else
		decho "${before}
${after}" "${parmlibmember}" 	
	fi
	rc=$?	
elif [ "$hdr" = true ] ; then
	echo "registrar: Severe Error. Only header found for: ${sw} in ${parmlibmember}" >&2
	exit 16
elif [ "$ftr" = true ] ; then
	echo "registrar: Severe Error. Only footer found for: ${sw} in ${parmlibmember}" >&2
	exit 16
else 
	if [ "${verb}" = "DISABLE" ]; then
		echo "registrar: Error. Trying to disable ${sw} but it is not present" >&2
		exit 0
	fi

	#ENABLE
	addProduct "${text}" "${parmlibmember}"
	rc=$?
fi

exit $rc
