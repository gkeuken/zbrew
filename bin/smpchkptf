#!/bin/sh

. zbrewfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpchkptf [-vd] <csi> <sysmod list>
	    
Examples:
	smpchkptf zbrew.igy630g.global.csi HADB630 JADB63H JADB631 JADB632 <-- Perform SMP/APPLY on previously RECEIVEed product IGY630
" >&2 
	exit 16
}

runchk() {
	csi="$1"
	shift
	requiredsysmods=$*

	missingsysmods=''

	all=${TMP}/$$.all.sysmods
	touch ${all}
	required=${TMP}/$$.required.sysmods
	touch ${required}
	missing=${TMP}/$$.missing.sysmods
	touch ${missing}

	tmpCntlHFS=${TMP}/$$.cntl.xml
	gzonelist=${TMP}/$$.smp.gzonelst
	echo "  SET BOUNDARY(GLOBAL).
  LIST GZONE.
" >${tmpCntlHFS}
	if [ ${verbose} = "1" ]; then echo "getting gzone entries for : ${csi}" >&2; fi
	smpout=`smp -i ${csi} -l ${gzonelist} <${tmpCntlHFS}`
	rc=$?
 	if [ ${rc} -gt 0 ]; then
                echo "Unable to determine global zone for: ${csi}." >&2
		echo "${smpout}" >&2
		return ${rc}
       	fi
	tgtzones=`awk '{ if ($2=="TARGET" && NF==3) { print($1); } }' < ${gzonelist}`
	if [ "${tgtzones}" = '' ]; then
		echo "Internal error. Unable to	determine global zone for: ${csi}. See ${gzonelist} for details." >&2
		return 16
	fi
	sysmodlist=${TMP}/$$.smp.sysmodlst
	for tgtzone in $tgtzones; do
		if [ ${verbose} -gt 0 ]; then
			echo "Checking target zone: ${tgtzone}" >&2
		fi
		echo "  SET BOUNDARY(${tgtzone})." >${tmpCntlHFS}
		echo "  LIST SYSMODS(" >>${tmpCntlHFS}
		for sysmods in ${requiredsysmods}; do
			echo "               ${sysmods}" >>${tmpCntlHFS}
		done
  		echo "  )." >>${tmpCntlHFS}

		smpout=`smp -i ${csi} -l ${sysmodlist} <${tmpCntlHFS}`
		rc=$?
		if [ ${rc} -gt 4 ]; then
			echo "Warning: Unable to determine SYSMOD list for target zone ${tgtzone}." >&2
		else
			if [ ${fmid_check} -gt 0 ]; then
				allsysmods=`awk '{ if ($2=="TYPE" && $3=="=" && $4=="FUNCTION" && NF==4) { print($1); } }' < ${sysmodlist}`
			else
				allsysmods=`awk '{ if ($2=="TYPE" && $3=="=" && ($4=="PTF" || $4=="SUPERSEDED") && NF==4) { print($1); } }' < ${sysmodlist}`
			fi
			if [ "${allsysmods}" = '' ]; then
				missingsysmods="${requiredsysmods}"
				if [ ${verbose} -gt 0 ]; then
					echo "No SYSMODs in target zone: ${tgtzone}" >&2
				fi
			else
				missing_sysmods='n'
				for requiredsysmod in ${requiredsysmods}; do
					found='n'
					for sysmod in ${allsysmods}; do
						if [ "${sysmod}" = "${requiredsysmod}" ]; then
							found='y'
							if [ ${verbose} -gt 0 ]; then
								echo "SYSMOD ${requiredsysmod} found in target zone: ${tgtzone}" >&2
							fi
						fi 
					done
					if [ "${found}" = 'n' ]; then
						missing_sysmods='y'
						if [ ${verbose} -gt 0 ]; then
							echo "SYSMOD ${requiredsysmod} not found in target zone: ${tgtzone}" >&2
						fi
						echo "${requiredsysmod}" >>${missing}
						missingsysmods="${missingsysmods} ${requiredsysmod}"
					fi
				done
				for sysmod in ${allsysmods}; do
					echo "${sysmod}" >>${all}
				done
				for sysmod in ${requiredsysmods}; do
					echo "${sysmod}" >>${required}
				done
				if [ "${missing_sysmods}" = 'n' ]; then
					return 0
				fi
			fi
		fi
	done
	if [ ${debug} -eq 0 ]; then
		rm ${required}
		rm ${missing}
		rm ${all}
		rm ${tmpCntlHFS}
		rm ${gzonelist}
		rm ${sysmodlist}
	else
		echo "Files not cleaned up .. debug on" >&2
	fi

	echo "One or more required SYSMODS (PTFs or FUNCTIONS) have not been applied to any of the target zones:" >&2
	echo "${tgtzones}" >&2
	echo "The required SYSMODs list is: ${requiredsysmods}" >&2
	echo "The missing SYSMODs are: ${missingsysmods}" >&2
	return 16
}  

debug=0
verbose=0
fmid_check=0
opts=""
while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    f )
      fmid_check=1
      opts="${opts} -d"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zbrew ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zbrew ${TooFewParms} E "$#"
	syntax
	exit 16
fi

mydir=$(callerdir ${0})
props="${mydir}/../properties/zbrew.properties"
. zbrewprops "${props}"
if [ $? -gt 0 ]; then
        echo "Internal Error. Unable to find ${props}" >&2
	exit 4
fi   

if [ -z "${TMP}" ]; then
	if [ -d /tmp ]; then
		TMP=/tmp
	else
		echo "Unable to set TMP. Please export TMP before running"
		exit 16
	fi
fi

if [ -d $TMP ]; then
	;
else
	echo "TMP environment variable is defined to ${TMP} but the directory does not exist. Please create directory or change environment variable."
	exit 16
fi

out=$(whence zbrewfuncs >/dev/null)
if [ $? -eq 0 ]; then
	. zbrewfuncs
else
    	echo "zbrew tools need to be in your PATH"
	exit 4
fi

props=$(callerdir "$0")"/../../zbrew/properties/global.properties"
. zbrewprops ${props}

out=`runchk $*`
rc=$?
if [ $rc -gt 0 ]; then
	echo ${out}
	exit $rc
fi
exit 0
