#!/bin/sh

. zbrewfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpapply [-vd] <prefix> <fmid list>
	    
Examples:
	smpapply igy630 HADB630 JADB63H JADB631 JADB632 <-- Perform SMP/APPLY on previously RECEIVEed product IGY630
" >&2 
	exit 16
}

runapply() {
	check="$1"
	sw="$2"
	fmids="$3"

	tmpCntlHFS=${ZBREW_TMP}/$$.${check}.cntl.xml

	echo "  SET BDY(${sw}T)." >${tmpCntlHFS}
	echo "  APPLY SELECT(" >>${tmpCntlHFS}
	for fmid in $fmids; do
		echo "    ${fmid}" >>${tmpCntlHFS}
	done
	echo "  )" >>${tmpCntlHFS}
	if [ "${ALLPTFS}" = '1' ]; then
		echo "  FORFMID(" >>${tmpCntlHFS}
		for fmid in $fmids; do
			echo "    ${fmid}" >>${tmpCntlHFS}
		done
		echo "  )" >>${tmpCntlHFS}
	fi
	echo "  GROUPEXTEND(NOAPARS,NOUSERMODS)" >>${tmpCntlHFS}
	if [ "${check}" = "CHECK" ]; then
		echo "  CHECK" >>${tmpCntlHFS}
	fi
	echo "  RETRY(YES)" >>${tmpCntlHFS}
	echo "  BYPASS(HOLDSYSTEM,HOLDUSER,HOLDCLASS(HIPER))." >>${tmpCntlHFS}
	
	smprpt="${ZBREW_TMP}/$$.smprpt"
	smpsysprint="${ZBREW_TMP}/$$.sysprint"
	
	smpout=`smp -w ${ZBREW_TMP} -r "${smprpt}" -p "${smpsysprint}" -i ${ZBREW_HLQ}${sw}G.GLOBAL.CSI <${tmpCntlHFS}`
	rc=$?
	rm "${tmpCntlHFS}"
	if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
		echo "${smpout}"
	else
		rm "${smprpt}"
		rm "${smpsysprint}"
	fi
	
        return ${rc}
} 

apply() {
	sw=$2
	
	if [ ${check} = "CHECK" ]; then
		appmsg="APPLY(CHECK)"
	else
		appmsg="APPLY"
	fi
	if [ "${verbose}" -gt '0' ]; then
                echo "Running SMPE ${appmsg} for ${sw}"
        fi
	out=`runapply $*`
	rc=$?
	if [ ${rc} -gt 0 ] || [ ${verbose} -gt 0 ]; then
 		echo "SMP/E ${appmsg} of ${sw} returned code ${rc}. ${out}" >&2
		return ${rc}
	fi

        return ${rc}
}

debug=0
verbose=0
opts=""
while getopts ":vd" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zbrew ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zbrew ${TooFewParms} E "$#"
	syntax
	exit 16
fi

mydir=$(callerdir ${0})
props="${mydir}/../properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

check=$(echo ${1} | tr '[:lower:]' '[:upper:]') 
zosname=$(echo ${2} | tr '[:lower:]' '[:upper:]') 
fmids="$3"

out=`apply ${check} ${zosname} ${fmids}`; 
rc=$? 
if [ $rc -gt 0 ]; then
	echo "SMP/E APPLY failed with return code $rc" >&2
	echo "${out}" >&2
fi

exit $rc
