#!/bin/sh
#set -x
. zbrewfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpappacc [-vd] <prefix> <fmid list>
	    
Examples:
	smpappacc apply igy630 HADB630 JADB63H JADB631 JADB632 <-- Perform SMP/APPLY on previously RECEIVEed product IGY630
	smpappacc accept igy630 HADB630 JADB63H JADB631 JADB632 <-- Perform SMP/ACCEPT on previously RECEIVEed product IGY630
" >&2 
	exit 16
}


fmids() {
        zbrewlog "fmids" $*
        sw=$1
        smplist="${ZBREW_TMP}/smpfmid.$$.smplist"
        smpout=`smp -i "${ZBREW_HLQ}${sw}G.GLOBAL.CSI" -l "${smplist}" <<zzz
  SET BDY(GLOBAL).
  LIST FUNCTIONS.
zzz`
        rc=$?
        zbrewlog "fmids RC: ${rc}"
        if [ $rc -eq 0 ]; then
                fmids=`awk ' /= FUNCTION/ { print $1; }' ${smplist}`
                uniq_fmids=`echo ${fmids} | tr ' ' '\n' | sort | uniq`
                echo ${uniq_fmids}

        else
                echo "smpfmid failed with rc:$rc" >&2
                echo "${smpout}" >&2
        fi
        rm -f "${smplist}" 2>/dev/null
        return $rc
}

fmidset() {
        zbrewlog "fmidset" $*
        sw=$1
        shift
        fmids=$*
        fmidset="${sw}FS"

        tmpCntlHFS="${ZBREW_TMP}/smpfmid.$$.smpcntl"
        echo "  SET BDY(GLOBAL)." >>${tmpCntlHFS}
        echo "  UCLIN." >>${tmpCntlHFS}
        echo "  REP FMIDSET(${fmidset})" >>${tmpCntlHFS}
        echo "  FMID(" >>${tmpCntlHFS}
        for fmid in $fmids; do
                echo "    ${fmid}" >>${tmpCntlHFS}
        done
        echo "  )." >>${tmpCntlHFS}
        echo "  ENDUCL." >>${tmpCntlHFS}
        smpout=`smp -i "${ZBREW_HLQ}${sw}G.GLOBAL.CSI" <${tmpCntlHFS}`
        rc=$?
        zbrewlog "fmidset RC: ${rc}"
        rm ${tmpCntlHFS} 2>/dev/null
        if [ $rc -gt 4 ] || [ $verbose -gt 0 ]; then
                echo "fmidset ended with return code: $rc" >&2
                echo "${smpout}" >&2
        fi
        echo "${fmidset}"
        return $rc
}



runapply() {
	sw="$1"

        fmids=`fmids ${sw}`
        if [ $? -gt 0 ]; then
                return $?
        fi

        fmidset=`fmidset ${sw} ${fmids}`
        if [ $? -gt 4 ]; then
                return $?
        fi
        if [ ${verbose} -gt 0 ]; then
                echo "Running ${smpfunc} ${check} ${sw} ${fmidset}" >&2
        fi
	
	tmpCntlHFS=${ZBREW_TMP}/$$.${check}.cntl.xml

	if [ "${smpfunc}" = "APPLY" ]; then
		echo "  SET BDY(${sw}T)." >${tmpCntlHFS}
	else
		echo "  SET BDY(${sw}D)." >${tmpCntlHFS}
	fi
	echo "  ${smpfunc} SELECT(" >>${tmpCntlHFS}
	for fmid in $fmids; do
		echo "    ${fmid}" >>${tmpCntlHFS}
	done
	echo "  )" >>${tmpCntlHFS}
	if [ "${ALLPTFS}" = '1' ]; then
		echo "  FORFMID(" >>${tmpCntlHFS}
		for fmid in $fmids; do
			echo "    ${fmid}" >>${tmpCntlHFS}
		done
		echo "  )" >>${tmpCntlHFS}
	fi
	echo "  GROUPEXTEND(NOAPARS,NOUSERMODS)" >>${tmpCntlHFS}
	if [ "${check}" = "CHECK" ]; then
		echo "  CHECK" >>${tmpCntlHFS}
	fi
	echo "  RETRY(YES)" >>${tmpCntlHFS}
	echo "  BYPASS(HOLDSYSTEM,HOLDUSER,HOLDCLASS(HIPER))." >>${tmpCntlHFS}
	
	smprpt="${ZBREW_TMP}/$$.smprpt"
	smpsysprint="${ZBREW_TMP}/$$.sysprint"
	
	smpout=`smp -w ${ZBREW_TMP} -r "${smprpt}" -p "${smpsysprint}" -i ${ZBREW_HLQ}${sw}G.GLOBAL.CSI <${tmpCntlHFS}`
	rc=$?
	zbrewlog "${smpfunc} ${check} ${sw} Return Code: ${rc}"
	rm "${tmpCntlHFS}" 2>/dev/null
	if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
		echo "${smpout}" >&2 
	else
		rm "${smprpt}" 2>/dev/null
		rm "${smpsysprint}" 2>/dev/null
	fi
	
        return ${rc}
} 


debug=0
verbose=0
opts=""
while getopts ":vdcpqrs" opt; do
  case ${opt} in
    p )
      smpfunc="APPLY"
      check="CHECK"
      ;;
    q ) 
      smpfunc="APPLY"
      check="NOCHECK"
      ;;
    r )
      smpfunc="ACCEPT"
      check="CHECK"
      ;;
    s )
      smpfunc="ACCEPT"
      check="NOCHECK"
      ;;
    d )
      debug=1
      opts="${opts} -d"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zbrew ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 1 ]; then
	msg zbrew ${TooFewParms} E "$#"
	syntax
	exit 16
fi

mydir=$(callerdir ${0})
props="${mydir}/../properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

zosname=$(echo ${1} | tr '[:lower:]' '[:upper:]') 
fmids="$2"

out=`runapply ${zosname}`; 

rc=$? 
if [ $rc -gt 0 ]; then
	echo "SMP/E ${smpfunc} failed with return code $rc" >&2
	echo "${out}" >&2
fi

exit $rc
