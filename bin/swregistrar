#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
swregistrar [-vd] <swname> enable|disable <product> [<enablement text>]

Examples:
	Enable BGZ106 as part of product 5737-I22 with product entry
		swregistrar bgz106 enable 5737-I22 \"PRODUCT OWNER('IBM CORP') ... STATE(ENABLED)\"
	Disable BGZ106 as part of product 5737-I22 with product entry
        	swregistrar bgz106 disable 5737-I22
Note:
	The PDS \${ZBREW_ROOT}PARMLIB is created if it does not already exist
	The PDS member IFAPRD\${ZBREW_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new product enablement text appended if 'enable' is specified.
	The PDS member will have the product enablement text removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

addProduct() {
	text="${1}"
	dataset="${2}"

	decho -a "${header}
${text}
${footer}" "${dataset}"
	rc=$?
	if [ $rc -gt 0 ]; then 
		echo "swregistrar: Error. Unable to append to: ${dataset}" >&2
	fi
	return $rc
}
	
out=$(whence zbrewfuncs >/dev/null)
if [ $? -eq 0 ]; then
	. zbrewfuncs
else
    	echo "zbrew tools need to be in your PATH" >&2
	exit 4
fi

mydir=$(callerdir ${0})
props="${mydir}/../../zbrew/properties/globalprops.json"
zbrewpropse zbrew global "${props}"

props="${mydir}/../../zbrew/properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg swregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg swregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  
sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
id=$(echo $3 | tr '[:lower:]' '[:upper:]');
if [ "${verb}" = "ENABLE" ]; then
	if [ $# -lt 4 ]; then 
		msg swregistrar ${TooFewEnableParms} E "$#"
		syntax
		exit 8
	fi    
	shift 3
	text="$*"
elif [ "${verb}" != "DISABLE" ]; then
	msg swregistrar ${UnknownAction} E "${verb}"
	exit 8
fi  

banner="* NOTE: File generated by zbrew. Only use zbrew to change"
header="* --- ${id} start --- *"
footer="* --- ${id} end   --- *"

parmlibds="${ZBREW_HLQ}PARMLIB"
dls ${parmlibds} >/dev/null 2>&1
exists=$?

#
# Dataset does not exist yet. If ENABLE, create. If DISABLE, all done
#
if [ ${exists} -gt 0 ]; then
	if [ "${verb}" = "ENABLE" ]; then
		dtouch -tpds "${parmlibds}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "swregistrar: Error. Unable to create PDS ${parmlibds}" >&2
			exit $rc
		fi
	else
		exit 0
	fi
fi

member="IFAPRD${ZBREW_PARMLIB_SFX}"
parmlibmember="${parmlibds}(${member})"
mls "${parmlibmember}" >/dev/null 2>&1
exists=$?

#
# Dataset member does not exist yet. If ENABLE, create. If DISABLE, all done
#
if [ ${exists} -gt 0 ]; then
	if [ "${verb}" = "ENABLE" ]; then
		decho "${banner}" "${parmlibmember}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "swregistrar: Error. Unable to create PDS member ${parmlibmember}" >&2
			exit $rc
		fi
		addProduct "${text}" "${parmlibmember}"
		rc=$?
		if [ $rc -gt 0 ]; then 
			echo "swregistrar: Error. Unable to create PDS member ${parmlibmember}" >&2
		fi
		exit $rc
	else
		exit 0
	fi
fi

#
# Dataset member exists. If ENABLE, check if product already specified. If so, issue error. If not, append to bottom
# If DISABLE, check if product already specified. If so, remove entry. If not, all done (no error). 
#

hdr=false
ftr=false

hdrout=`dgrep -n "${header}" "${parmlibmember}"`
rc=$?
if [ ${rc} -eq 0 ]; then
	hdr=true
fi
ftrout=`dgrep -n "${footer}" "${parmlibmember}"`
rc=$?
if [ ${rc} -eq 0 ]; then
	ftr=true
fi

hdrnum=`echo "${hdrout}" | wc -l`
ftrnum=`echo "${ftrout}" | wc -l`

if [ $hdrnum -gt 1 ]; then
	echo "swregistrar: Severe Error. Multiple product headers for: ${id}" >&2
	exit 16
fi
if [ $ftrnum -gt 1 ]; then
	echo "swregistrar: Severe Error. Multiple product footers for: ${id}" >&2
	exit 16
fi

hdrline=`echo "${hdrout}" | awk '{ print substr($2, 1, length($2)-1) }'`
ftrline=`echo "${ftrout}" | awk '{ print substr($2, 1, length($2)-1) }'`

if [ "$hdr" = true ] && [ "$ftr" = true ] ; then
	if [ "${verb}" = "ENABLE" ]; then
		echo "swregistrar: Error. Trying to enable product ${id}, which is already enabled." >&2
		exit 8
	fi
	current=`cat "//'${parmlibmember}'"`
	headlines=`expr $hdrline - 1`
	before=`echo "${current}" | head -${headlines}`
	taillines=`expr $ftrline + 1`
	after=`echo "${current}" | tail +${taillines}`
	decho "${before}
${after}" "${parmlibmember}" 	
	rc=$?	
elif [ "$hdr" = true ] ; then
	echo "swregistrar: Severe Error. Only header found for: ${id}" >&2
	exit 16
elif [ "$ftr" = true ] ; then
	echo "swregistrar: Severe Error. Only footer found for: ${id}" >&2
	exit 16
else 
	addProduct "${text}" "${parmlibmember}"
	rc=$?
fi

exit $rc
