#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
swregistrar [-vd] <swname> enable|disable <product> [<enablement text>]

Examples:
	Enable BGZ106 as part of product 5737-I22 with product entry
		swregistrar bgz106 enable 5737-I22 \"PRODUCT OWNER('IBM CORP') ... STATE(ENABLED)\"
	Disable BGZ106 as part of product 5737-I22 with product entry
        	swregistrar bgz106 disable 5737-I22
Note:
	The PDS ${ZBREW_ROOT}PARMLIB is created if it does not already exist
	The PDS member IFAPRD${ZBREW_PARMLIB_SUFFIX} is created if it does not already exist
	The PDS member will have the new product enablement text appended if 'enable' is specified.
	The PDS member will have the product enablement text removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 16
}

out=$(whence zbrewfuncs >/dev/null)
if [ $? -eq 0 ]; then
	. zbrewfuncs
else
    	echo "zbrew tools need to be in your PATH" >&2
	exit 4
fi

mydir=$(callerdir ${0})
props="${mydir}/../../zbrew/properties/globalprops.json"
zbrewpropse zbrew global "${props}"

props="${mydir}/../../zbrew/properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg swregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg swregistrar ${TooFewParms} E "$#"
 	syntax
        exit 16
fi  
sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
id=$(echo $3 | tr '[:lower:]' '[:upper:]');
if [ "${verb}" = "ENABLE" ]; then
	if [ $# -lt 4 ]; then 
		msg swregistrar ${TooFewEnableParms} E "$#"
		syntax
		exit 16
	fi  
	shift 3
	text="$*"
fi

echo "${sw}"
echo "${verb}"
echo "${id}"
echo "${text}"

exit 0
