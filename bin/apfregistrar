#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
apfregistrar [-vd] <swname> enable|disable [dataset]+

Examples:
	Enable APF authorization for dataset ZBREW.EQAE20.SEQAAUTH
		apfregistrar eqae20 enable zbrew.eqae20.seqaauth
	Disable APF authorization for EQAE20 datasets
        	apfregistrar eqae20 disable 5737-I22
Note:
	The PDS \${ZBREW_ROOT}PARMLIB is created if it does not already exist
	The PDS member PROG\${ZBREW_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new APF authorized datasets added if 'enable' is specified
	The PDS member will have the APF authorized datasets removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg apfregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg apfregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

out=$(whence zbrewfuncs >/dev/null)
if [ $? -eq 0 ]; then
	. zbrewfuncs
else
    	echo "zbrew tools need to be in your PATH" >&2
	exit 4
fi      	
		
mydir=$(callerdir ${0})
props="${mydir}/../../zbrew/properties/globalprops.json"
zbrewpropse zbrew global "${props}"
	
props="${mydir}/../../zbrew/properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
shift 2
datasets=$*

header="/* --- ${sw}:${id} start --- */"
footer="/* --- ${sw}:${id} end   --- */"

parmlibds="${ZBREW_HLQ}PARMLIB"
member="PROG${ZBREW_PARMLIB_SFX}"

progmem="${ZBREW_HLQ}PARMLIB(${member})"
dls "${ZBREW_HLQ}PARMLIB" >/dev/null
if [ $? -gt 0 ]; then
	dtouch -tpds "${ZBREW_HLQ}PARMLIB"
fi
mls "${progmem}" >/dev/null

if [ "${verb}" = "DISABLE" ]; then
	registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}"
	exit $?
fi

if [ $? -eq 0 ]; then
	flag="-a"
else
	flag=
fi
text=""

for dataset in ${datasets}; do
	dataset=$(echo $dataset | tr '[:lower:]' '[:upper:]');
	info=`dls -l ${dataset}`
	if [ $? -gt 0 ]; then
		echo "apfregistrar: Dataset: ${dataset} not found." >&2
		exit 16
	fi
	volume=`echo "${info}" | awk '{ print $5; }'`
	opercmd "d sms,volume(${volume})" 2>/dev/null | grep "NOT AN SMS MANAGED DASD VOLUME"
	if [ $? -gt 0 ]; then
		volume="SMS"
		setstr="SMS"
	else
		setstr="VOLUME=${volume}"
	fi

	entry="APF ADD DSNAME(${dataset}) ${volume}"
	if [ "${text}" = "" ]; then
		text="${entry}"
	else
		text="APF ADD DSNAME(${dataset}) ${volume}
${text}"
	fi
	opercmd "SETPROG APF,ADD,DSNAME=${dataset},${setstr}"
done

registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}" "${text}"
exit $?
