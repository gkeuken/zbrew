#!/bin/sh

. zbrewfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpchkreq [-vd] <swname> <reqjson>
	    
Examples:
	Check that the requirements defined for EQAE20 are satisfied from \$ZBREW_ROOT/../zbrew-eqa/eqae20/eqae20req.json
	smpchkreq eqae20 \$ZBREW_ROOT/../zbrew-eqa/eqae20/eqae20req.json
" >&2 
	exit 16
}

chkreq() {
	type="$1"
	prodid="$2"
	fmid="$3"
	shift 3
	ptfs="$*"
	
	csienv="\$${prodid}_CSI"
	csi=`eval echo ${csienv}`
	if [ "${csi}" = '' ]; then
		echo "Environment variable: ${csienv} is not set, but is required for requisite checking" >&2
		return 16
	fi
	return 0
}

runchk() {
	reqs=`readreq $1 <$2`
	maxrc=0
	echo "${reqs}" | while read req; do
		result=`chkreq ${req}`
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "${result}" 
			maxrc=${rc}
		fi
	done
	return $maxrc
}

debug=0
verbose=0
fmid_check=0
opts=""
while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    f )
      fmid_check=1
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg smpchkreq ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg smpchkreq ${TooFewParms} E "$#"
	syntax
	exit 16
fi

out=$(whence zbrewfuncs >/dev/null)
if [ $? -eq 0 ]; then
	. zbrewfuncs
else
    	echo "zbrew tools need to be in your PATH"
	exit 4
fi
mydir=$(callerdir ${0})
props="${mydir}/../properties/zbrewprops.json"
zbrewpropse zbrew config "${props}"

props=$(callerdir "$0")"/../../zbrew/properties/globalprops.json"
zbrewpropse zbrew global ${props}

sw="$(echo $1 | tr '[:lower:]' '[:upper:]')"
json="$2"
out=`runchk "${sw}" "${json}"`
rc=$?
if [ $rc -gt 0 ]; then
	echo "${out}" >&2
	exit $rc
fi
exit 0
