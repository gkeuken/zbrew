#!/bin/sh

. zoscloudfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
zoscloud [-cvd] search|order|receive|install|configure|uninstall <software>
	and <software> is the software to search for
	-c: clean files before processing (e.g. delete SMP/E CSI datasets) and clean temporary files after processing (e.g. SMPNTS directory)
	
Note:
	zoscloud has a properties file called zoscloud.properties. The following properties need to be specified:
		ZOSCLOUD_ORDERROOT: 	The writable directory root where ORDER information will be placed by SMP/E (currently this needs to be done manually)
					Each product you ORDER will have a corresponding order file called <software>.order
		ZOSCLOUD_PROPSROOT: 	The writable directory root where custom properties for a product can be specified. 
					Each product you customize can have an optional <software>custominst.properties and/or <software>customconfig.properties file
	If any installation customization is required, edit the <software>custominstall.properties file after you RECEIVE <software> but before you INSTALL.   
	If any configuration customization is required, edit the <software>customconfig.properties file after you INSTALLE <software> but before you CONFIGURE.   
	    
Examples:
	zoscloud search cobol     <-- search for products with COBOL in their description
	zoscloud order igy630     <-- submit an order for IGY630J software (receive can not be performed until complete)
	zoscloud receive igy630   <-- SMP/E RECEIVE of COBOL (all languages) from ShopZ
	zoscloud install igy630   <-- check that all pre-reqs required for COBOL are satisfied, then run IGY630-specific install steps, the SMP/E APPLY the product
	zoscloud uninstall igy630 <-- check that uninstallation will not break other products, then remove SMP/E datasets and product-specific datasets
	zoscloud configure igy630 <-- run product-specific configuration after SMP/E APPLY step
" >&2 
	exit 16
}

#
# Temporary hack - replace with call to IBM-managed server (ShopZ) to get proper list
#
search() {
	search=$1
	callerdir=`callerdir $0`
	result=`grep -i "${search}" ${callerdir}/../zoscloud.software`
	echo "${result}" | tr '_' ' '
	return 0
}

#
# Temporary hack - replace with proper RESTful call to ShopZ to submit request
# Response will be an ORDER number that, when complete, will have information needed  
# for the RECEIVE
#
order() {
	# currently no-op. ORDER directory for COBOL IGY630E pre-populated
	if [ ${verbose} -gt 0 ]; then
		echo "order $1" >&2
	fi
	return 0
}

uninstall() {
	if [ ${verbose} -gt 0 ]; then
		echo "uninstall $*" >&2
	fi
	return 4
}

receive() {
	if [ ${verbose} -gt 0 ]; then
		echo "receive $*" >&2
	fi
	smpreceive $*
	return $?
}

check() {
	if [ ${verbose} -gt 0 ]; then
		echo "check $*" >&2
	fi
	return 0
}

apply() {
	if [ ${verbose} -gt 0 ]; then
		echo "apply $*" >&2
	fi
	return 0
}

install() {
	if [ ${verbose} -gt 0 ]; then
		echo "install $*" >&2
	fi
	return 0
}

configure() {
	if [ ${verbose} -gt 0 ]; then
		echo "configure $*" >&2
	fi
	return 0
}

debug=0
verbose=0
clean=0
opts=""
while getopts ":cvd" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    c )
      clean=1
      opts="${opts} -c"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zoscloud ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zoscloud ${TooFewParms} E "$#"
	syntax
	exit 16
fi

mydir=$(callerdir ${0})
props="${mydir}/../properties/zoscloud.properties"
. zoscloudprops "${props}"
if [ $? -gt 0 ]; then
	echo "Internal Error. Unable to find ${props}" >&2
	exit 4
fi
verb=$1
case ${verb} in
	search ) 
		out=`search $2`  
		rc=$?  
		echo "${out}"
		;;
	order ) 
		out=`order ${opts} $2`  
		rc=$?  
		echo "${out}"
		;;
	install )
		zosname=$(echo ${2} | tr '[:lower:]' '[:upper:]'); 
		if [ ${verbose} -gt 0 ]; then
			echo "Allocate SMP/E datasets for $2 " >&2
		fi
		smpconfig ${opts} ${zosname}
		if [ $? -gt 0 ]; then
			echo "Unable to configure SMP/E datasets. Receive failed" >&2
			exit 4
		fi
		out=`receive ${opts} ${zosname}`; 
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" 
		fi
		out=`check ${opts} $2`
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" 
		fi
		out=`install ${opts} $2`;
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" 
		fi
		out=`apply ${opts} $2`;
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" 
		fi
		;;	
	configure ) 
		out=`configure ${opts} $2`
		rc=$?
		;;	
	uninstall ) 
		out=`uninstall $2`
		rc=$?
		;;	
	* ) msg zoscloud ${UnknownAction} E ${verb}; exit 16;;
esac

exit $rc
