#!/bin/sh

. zoscloudfuncs
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
zoscloud [-cvd] search|deploy|remove|receive|check|install|apply|configure <software>
	and <software> is the software to search for
	-c: clean files before processing (e.g. delete SMP/E CSI datasets) and clean temporary files after processing (e.g. SMPNTS directory)
	    
Examples:
	zoscloud search cobol      <-- search for products with COBOL in their description
	zoscloud order igy630j     <-- submit an order for IGY630J software (receive can not be performed until complete)
	zoscloud deploy igy630j    <-- deploy Product 5655-EC6 (Enterprise COBOL 6.3.0) Japanese, ID IGY630J
	                              (deploy is short for receive, check, install, apply, configure)
	zoscloud receive igy630e   <-- SMP/E RECEIVE of COBOL English from ShopZ
	zoscloud check igy630e     <-- check that all pre-reqs required for COBOL English are satisfied
	zoscloud install igy630e   <-- run product-specific installation before SMP/E APPLY step
	zoscloud apply igy630e     <-- SMP/E APPLY of previously installed COBOL English, making it available for general use
	zoscloud configure igy630e <-- run product-specific configuration after SMP/E APPLY step
" >&2 
	exit 16
}

#
# Temporary hack - replace with call to IBM-managed server (ShopZ) to get proper list
#
search() {
	search=$1
	callerdir=`callerdir $0`
	result=`grep -i "${search}" ${callerdir}/../zoscloud.software`
	echo "${result}" | tr '_' ' '
	return 0
}

deploy() {
	sw="$1"
	out=`receive $sw`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo ${out}
		return ${rc}
	fi
	out=`check $sw`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo ${out}
		return ${rc}
	fi
	out=`install $sw`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo ${out}
		return ${rc}
	fi
	out=`apply $sw`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo ${out}
		return ${rc}
	fi
	out=`configure $sw`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo ${out}
		return ${rc}
	fi
	return 0
}

#
# Temporary hack - replace with proper RESTful call to ShopZ to submit request
# Response will be an ORDER number that, when complete, will have information needed  
# for the RECEIVE
#
order() {
	# currently no-op. ORDER directory for COBOL IGY630E pre-populated
	return 0
}

remove() {
	echo "Not implemented yet"
	return 4
}

receive() {
	smpreceive $1
	return $?
}

check() {
	return 0
}

install() {
	return 0
}

apply() {
	return 0
}

configure() {
	return 0
}

debug=0
verbose=0
clean=0
opts=""
while getopts ":cvd" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    c )
      clean=1
      opts="${opts} -c"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zoscloud ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zoscloud ${TooFewParms} E "$#"
	syntax
	exit 16
fi

mydir=$(callerdir ${0})
props="${mydir}/../zoscloud.properties"
. zoscloudprops "${props}"
if [ $? -gt 0 ]; then
	echo "Internal Error. Unable to find ${props}" >&2
	exit 4
fi
verb=$1
case ${verb} in
	search ) 
		out=`search $2`  
		rc=$?  
		echo "${out}"
		;;
	deploy ) 
		out=`deploy $2`
		rc=$?
		;;
	remove ) 
		out=`remove $2`
		rc=$?
		;;	
	receive )
		ussname=$(echo ${2} | tr '[:upper:]' '[:lower:]'); 
		zosname=$(echo ${2} | tr '[:lower:]' '[:upper:]'); 
		props="${SMPE_ORDERROOT}/${ussname}.properties"
		. zoscloudprops "${props}"
		if [ $? -gt 0 ]; then
			echo "ORDER for $2 is not ready yet (unable to find ${props})" >&2
			exit 4
		fi
		smpconfig ${opts} ${zosname}
		if [ $? -gt 0 ]; then
			echo "Unable to configure SMP/E datasets. Receive failed" >&2
			exit 4
		fi
		out=`receive ${zosname}`; 
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" 
		fi
		;;	
	check ) 
		out=`check $2`
		rc=$?
		;;	
	install ) 
		out=`install $2`;
		rc=$?;
		;;
	apply ) 
		out=`apply $2`
		rc=$?
		;;	
	configure ) 
		out=`configure $2`
		rc=$?
		;;	
	* ) msg zoscloud ${UnknownAction} E ${verb}; exit 16;;
esac

exit $rc
