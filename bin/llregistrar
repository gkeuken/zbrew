#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZCL000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
llregistrar [-vd] <swname> enable|disable [dataset]+

Examples:
	Enable linklist entry for dataset ZBREW.EQAE20.SEQABMOD
		llregistrar eqae20 enable zbrew.eqae20.seqabmod
	Disable linklist entry for EQAE20 datasets
        	llregistrar eqae20 disable
Note:
	The PDS \${ZBREW_ROOT}PARMLIB is created if it does not already exist
	The PDS member PROG\${ZBREW_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new link list datasets added if 'enable' is specified
	The PDS member will have the link list datasets removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg llregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg llregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

. zbrewsetenv 

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
shift 2
datasets=$*

header="/* --- ${sw} start --- */"
footer="/* --- ${sw} end   --- */"

parmlibds="${ZBREW_TGT_HLQ}PARMLIB"
member="PROG${ZBREW_PARMLIB_SFX}"

llname=`opercmd 'd lla' 2>/dev/null | grep 'LNKLST SET' | awk ' { print $3; }'`
datasets=$(echo $datasets | tr '[:lower:]' '[:upper:]');
for dataset in ${datasets}; do
        info=`dls -l ${dataset}`
        if [ $? -gt 0 ]; then
        	echo "llregistrar: Dataset: ${dataset} not found." >&2
       		exit 16
        fi
done 

if [ "${verb}" = "DISABLE" ]; then
	registrar "${sw}" "DISABLE" "${parmlibds}" "${member}" "${header}" "${footer}"
	for dataset in ${datasets}; do
		opercmd "SETPROG LNKLST,DELETE,NAME=${llname},DSNAME=${dataset}"
	done
	opercmd "MODIFY LLA,REFRESH"
	exit $?
fi

# ENABLE follows

for dataset in ${datasets}; do
	entry="LNKLST ADD NAME(${llname}) DSNAME(${dataset})"
	if [ "${text}" = "" ]; then
		text="${entry}"
	else
		text="${entry}
${text}"
	fi
	# msf - this is not sufficient - the entry is not getting added
	opercmd "SETPROG LNKLST,ADD,NAME=${llname},DSNAME=${dataset}"
done
opercmd "MODIFY LLA,REFRESH"

registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}" "${text}"
exit $?
